{
  "hash": "944ddfd99b98d1cb4dae93e4ab4e2650",
  "result": {
    "markdown": "---\ntitle: \"What Are Data Structures? A Simple Introduction for Beginners\"\ndescription: \"Learn what data structures are, why they matter, and how they can improve the efficiency of your code. This blog introduces key concepts in an easy-to-understand way for those just starting their coding journey.\"\ndate: 12-20-2024\ncategories: [Data Science] # self-defined categories\ncitation: \n  url: https://sijan14.github.io/sijan_portfolio/posts/2024-12-20-data-structure-basics/ \nimage: ds_ai.jpg\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\nformat:\n  html:\n    markdown: true\n    allow-raw-html: true\n    highlight-style: tango\ncomments:\n  giscus: \n    repo: Sijan14/discussion\n---\n\nWhen working with data, organizing, storing, and performing operations on it efficiently is key. This is where data structures come into play. In simple terms, a data structure is a way of organizing and managing data so that it can be accessed and modified efficiently.\n\n### Data Type vs. Data Structure\n\nIf you are reading this, you’re likely already familiar with data types such as `int` (integer), `float` (floating-point number), `str` (string), and `bool` (Boolean). These are the building blocks used to define the kind of data you're working with. When you perform data cleaning or analysis, you often manipulate these primitive data types.\n\nData structures build on these basic data types to manage and organize data more effectively. Think of it like constructing a car: the raw materials like metal and plastic are akin to the primitive data types, while the car's components, such as the engine, trunk, doors, and wheels, represent the data structures. In essence, data structures use data types to create organized frameworks that allow for efficient storage and operations on your data.\n\n### Common Operations\n\nData structures are essential tools in programming because they allow you to store, organize, and manage data efficiently. Common operations performed with data structures include:\n\n-   **Insertion**: Adding new elements.\n-   **Deletion**: Removing existing elements.\n-   **Searching**: Finding specific elements.\n-   **Accessing**: Retrieving elements by their position or key.\n-   **Updating**: Modifying existing elements.\n\nWhile data types tell the computer what kind of data is being stored (e.g., integers, strings, floats), they do not inherently provide a way to store multiple values together or perform advanced operations. For managing multiple similar data points, data structures become invaluable.\n\n### Why Use Data Structures?\n\nIf you have several similar pieces of data to store and manipulate later, using a data structure allows for organized and efficient operations. Here's an example:\n\n------------------------------------------------------------------------\n\n### Example: Storing Student Grades\n\nImagine you have 5 students in a class who took a final exam. Their grades need to be stored for future calculations.\n\n#### Without a Data Structure\n\nUsing only data types, you could store the grades in separate variables like this:\n\n``` python\nstudent1 = 85\nstudent2 = 90\nstudent3 = 78\nstudent4 = 92\nstudent5 = 88\n```\n\nThis approach works but becomes cumbersome as the number of students increases. Operations like calculating the average grade or updating a grade require manual effort for each variable.\n\n#### With a Data Structure (Array)\n\nInstead, you can use an array to store the grades:\n\n``` python\nstudent_grades = [85, 90, 78, 92, 88]\n```\n\nNow you can perform operations more efficiently:\n\n```python\n# Access a specific grade: Retrieve the second student's grade\nsecond_grade = student_grades[1]  # Outputs 90\n\n# Update a grade: Add extra credit to the third student's grade\nstudent_grades[2] += 5  # Updates 78 to 83\n\n# Calculate the average grade: Compute the average for all students\naverage_grade = sum(student_grades) / len(student_grades)  # Outputs 86.6\n\n# Add a new student: Include another student's grade\nstudent_grades.append(95)\n\n# Remove a student: Remove the grade of a student who dropped out\nstudent_grades.pop(1)  # Removes the second student's grade\n\n```\n\n\n#### With a Data Structure (Hash Table)\n\nIf you need to associate grades with student names for better clarity, a hash table (dictionary) works even better:\n\n``` python\nstudent_grades = {\n    \"Sijan\": 85,\n    \"Bella\": 90,\n    \"Alex\": 78,\n    \"Taylor\": 92,\n    \"Jordan\": 88\n}\n```\n\nWith this structure:\n\n-   Accessing a grade by name is straightforward:\n\n``` python\nbella_grade = student_grades[\"Bella\"]  # Outputs 90\n```\n\n-   Updating grades is intuitive:\n\n``` python\nstudent_grades[\"Alex\"] += 5  # Updates Alex's grade to 83\n```\n\n-   Adding or removing students is easy:\n\n``` python\nstudent_grades[\"Chris\"] = 95  # Adds Chris with a grade of 95\ndel student_grades[\"Taylor\"]  # Removes Taylor\n```\n\n### Common Data Structures\n\nUnderstanding the unique characteristics of different data structures—whether they are ordered or unordered, and what operations they excel at—helps in selecting the best one for a given task.\n\n-   *Array*: An ordered collection of elements, best for quick access and iteration.\n\n-   *Linked List*: An ordered, dynamic structure where elements are linked, ideal for frequent insertions and deletions.\n\n-   *Trees*: A hierarchical, ordered structure, excellent for representing hierarchical relationships and performing searches.\n\n-   *Hash Table*: An unordered structure using key-value pairs, best for fast lookups and retrievals.\n\n-   *Heap*: A specialized tree-based structure, great for efficient retrieval of the smallest or largest element.\n\n-   *Graphs*: A network of nodes connected by edges, perfect for modeling relationships and performing pathfinding operations.\n\n### Data Structures vs. Abstract Data Types (ADT)\n\nEven if you're not very familiar with the different data structures I’ve mentioned, you're likely familiar with Abstract Data Types (ADTs) like lists, sets, and dictionaries. ADTs essentially define the operations or functionalities you can perform on data, while data structures are the low-level implementations that make those operations possible. Using the car example again, the ADT represents the car’s functionalities—driving, braking, and steering—while the data structures are the specific building blocks like the engine, wheels, and frame that make those functionalities work. ADTs are high-level abstract concepts, while data structures are the concrete details that enable those concepts to function.\n\nKnowing just the ADT and its functionality will take you a long way, and you don't necessarily need to understand the underlying data structures to perform different tasks. For instance, a list can be implemented using either an array or a linked list. When you use the built-in `list` function, like `my_list = []`, you don’t need to know whether it's implemented using an array or a linked list. However, understanding the underlying data structure can be important for optimizing performance, such as improving runtime or space complexity. This deeper understanding helps you make more efficient decisions when choosing how to implement solutions, especially when performance is critical.\n\n### Common ADTs\n\nHere are some common ADTs and the data structures used to implement them:\n\n-   *List*: Array, Linked List\n-   *Stack*: Array, Linked List\n-   *Queue*: Array, Linked List, Circular Buffer\n-   *Deque*: Array, Doubly Linked List\n-   *Set*: Hash Table, BST\n-   *Bag*: Array, Linked List\n-   *Priority Queue*: Binary Heap, Fibonacci Heap\n-   *Dictionary*: Hash Table, BST\n\n### Real World Applications\n\nDifferent data structures are utilized in real-world applications to optimize performance, manage data efficiently, and solve complex problems. Here are some practical implementations of commonly used data structures:\n\n-   *Array*: Arrays are used in applications like image processing and spreadsheets where data is stored in contiguous memory locations for quick access.\n\n-   *Linked List*: Linked lists are utilized in web browsers to manage navigation history, allowing for easy forward and backward movement.\n\n-   *Stack*: Stacks are implemented in function call management, as well as in undo/redo operations in text editors, following the Last In, First Out (LIFO) principle.\n\n-   *Queue*: Queues are used in operating systems for task scheduling and in customer service systems to process requests in the order they arrive.\n\n-   *Set*: Sets are applied in social media platforms to store unique user data, such as friend lists, without duplicates.\n\n-   *Hash Table*: Hash tables are used in contact management systems to map a user’s name to their phone number for fast lookups.\n\n-   *Binary Search Tree (BST)*: BSTs are used in databases for fast searching, insertion, and deletion of sorted records.\n\n-   *Heap*: Heaps are implemented in job scheduling systems to prioritize tasks based on urgency or importance.\n\n-   *Graph*: Graphs are used to model networks like social media connections, transportation systems, and web pages.\n\n### Conclusion\n\nThese are just a few examples of how data structures are applied in the real world, and there are countless other uses that I haven’t covered here. It took me some time to truly grasp the key differences between data structures and other data types. This brief introduction to data structures serves as a way for me to reinforce my own understanding and, hopefully, help others in the process.\n\nData structures are fundamental tools for organizing and managing data efficiently across various real-world applications. From simple structures like arrays and linked lists to more complex ones like hash tables and graphs, each data structure has its own purpose based on the specific problem you're trying to solve. Understanding these practical applications enables us to select the right data structure, optimize performance, and tackle challenges more effectively.\n\nIf you found this post helpful or have any feedback, I’d love to hear your thoughts—feel free to leave a comment below!\n\n### Reference\nzyBooks, a Wiley brand. (2024). Data Structures With Python. https://learn.zybooks.com/zybook/MONTCLAIRCSIT506ZharriFall2024 (accessed 2024).\n\n\n```{html}\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"Sijan14/discussion\"\n        data-repo-id=\"R_kgDONh_IVQ\"\n        data-category=\"Announcements\"\n        data-category-id=\"DIC_kwDONh_IVc4ClgEq\"\n        data-mapping=\"pathname\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"noborder_light\"\n        data-lang=\"en\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n```\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}