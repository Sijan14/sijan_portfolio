{
  "hash": "09448a8b83234644677e66fafd7ad185",
  "result": {
    "markdown": "---\ntitle: \"What Are Data Structures? A Simple Introduction for Beginners\"\ndescription: \"Learn what data structures are, why they matter, and how they can improve the efficiency of your code. This blog introduces key concepts in an easy-to-understand way for those just starting their coding journey.\"\ndate: 12-18-2024\ncategories: [Data Science] # self-defined categories\ncitation: \n  url: https://sijan14.github.io/sijan_portfolio/posts/2024-12-18-first-blog-post/ \nimage: bear.jpg\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n\nformat:\n  html:\n    highlight: pygments\n---\n\n## What Are Data Structures? A Simple Introduction for Beginners\n\nWhen working with data, organizing, storing, and performing operations on it efficiently is key. This is where data structures come into play. In simple terms, a data structure is a way of organizing and managing data so that it can be accessed and modified efficiently.\n\n### Data Type vs. Data Structure\n\nIf you are reading this, youâ€™re likely already familiar with data types such as `int` (integer), `float` (floating-point number), `str` (string), and `bool` (Boolean). These are the building blocks used to define the kind of data you're working with. When you perform data cleaning or analysis, you often manipulate these primitive data types.\n\nData structures build on these basic data types to manage and organize data more effectively. Think of it like constructing a car: the raw materials like metal and plastic are akin to the primitive data types, while the car's components, such as the engine, trunk, doors, and wheels, represent the data structures. In essence, data structures use data types to create organized frameworks that allow for efficient storage and operations on your data.\n\n### Common Operations\n\nData structures are essential tools in programming because they allow you to store, organize, and manage data efficiently. Common operations performed with data structures include:\n\n-   **Insertion**: Adding new elements.\n-   **Deletion**: Removing existing elements.\n-   **Searching**: Finding specific elements.\n-   **Accessing**: Retrieving elements by their position or key.\n-   **Updating**: Modifying existing elements.\n\nWhile data types tell the computer what kind of data is being stored (e.g., integers, strings, floats), they do not inherently provide a way to store multiple values together or perform advanced operations. For managing multiple similar data points, data structures become invaluable.\n\n### Why Use Data Structures?\n\nIf you have several similar pieces of data to store and manipulate later, using a data structure allows for organized and efficient operations. Here's an example:\n\n------------------------------------------------------------------------\n\n### Example: Storing Student Grades\n\nImagine you have 5 students in a class who took a final exam. Their grades need to be stored for future calculations.\n\n#### Without a Data Structure\n\nUsing only data types, you could store the grades in separate variables like this:\n\n```python\nstudent1 = 85\nstudent2 = 90\nstudent3 = 78\nstudent4 = 92\nstudent5 = 88\n```\n\nThis approach works but becomes cumbersome as the number of students increases. Operations like calculating the average grade or updating a grade require manual effort for each variable.\n\n#### With a Data Structure (Array)\n\nInstead, you can use an array to store the grades:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nstudent_grades = [85, 90, 78, 92, 88]\n```\n:::\n\n\nNow you can perform operations more efficiently:\n\n-   Access a specific grade: \nRetrieve the second student's grade:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nsecond_grade = student_grades[1]  # Outputs 90\n```\n:::\n\n\n- Update a grade:\nAdd extra credit to the third student's grade:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nstudent_grades[2] += 5  # Updates 78 to 83\n```\n:::\n\n\n- Calculate the average grade:\nCompute the average for all students:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\naverage_grade = sum(student_grades) / len(student_grades)  # Outputs 86.6\n```\n:::\n\n\n- Add a new student:\nInclude another student's grade:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nstudent_grades.append(95)\n```\n:::\n\n\n- Remove a student:\nRemove the grade of a student who dropped out:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nstudent_grades.pop(1)  # Removes the second student's grade\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n90\n```\n:::\n:::\n\n\n#### With a Data Structure (Hash Table) \nIf you need to associate grades with student names for better clarity, a hash table (dictionary) works even better:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nstudent_grades = {\n    \"Sijan\": 85,\n    \"Bella\": 90,\n    \"Alex\": 78,\n    \"Taylor\": 92,\n    \"Jordan\": 88\n}\n```\n:::\n\n\nWith this structure:\n\n- Accessing a grade by name is straightforward:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nbella_grade = student_grades[\"Bella\"]  # Outputs 90\n```\n:::\n\n\n- Updating grades is intuitive:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nstudent_grades[\"Alex\"] += 5  # Updates Alex's grade to 83\n```\n:::\n\n\n- Adding or removing students is easy:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nstudent_grades[\"Chris\"] = 95  # Adds Chris with a grade of 95\ndel student_grades[\"Taylor\"]  # Removes Taylor\n```\n:::\n\n\n### Common Data Structures\n- **Array**: An ordered collection of elements, best for quick access and iteration.\n- **Linked List**: An ordered, dynamic structure where elements are linked, ideal for frequent insertions and deletions.\n- **Trees**: A hierarchical, ordered structure, excellent for representing hierarchical relationships and performing searches.\n- **Hash Table**: An unordered structure using key-value pairs, best for fast lookups and retrievals.\n- **Heap**: A specialized tree-based structure, great for efficient retrieval of the smallest or largest element.\n- **Graphs**: A network of nodes connected by edges, perfect for modeling relationships and performing pathfinding operations.\n\nThink of an ADT as a recipe or specification, like describing a car (what it does: drive, brake, steer). A data structure is the actual car (its engine, wheels, and frame) that fulfills the specification.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}